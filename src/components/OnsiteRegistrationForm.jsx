import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  User, 
  Mail, 
  Phone, 
  MapPin, 
  GraduationCap, 
  Users, 
  FileText, 
  Clock,
  CheckCircle,
  AlertCircle,
  Calendar,
  Target,
  Lightbulb,
  X
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { 
  getAvailableSchedules, 
  getProjectTemplates, 
  submitOnsiteRegistration 
} from '@/lib/onsiteService';

const OnsiteRegistrationForm = ({ course, isOpen, onClose, onSuccess }) => {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [schedules, setSchedules] = useState([]);
  const [projectTemplates, setProjectTemplates] = useState([]);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Schedule selection
    schedule_id: '',
    
    // Personal Information
    applicant_name: '',
    applicant_email: '',
    applicant_phone: '',
    applicant_age: '',
    
    // Educational Information
    school_name: '',
    grade_level: '',
    parent_name: '',
    parent_phone: '',
    
    // Address
    address: {
      address: '',
      district: '',
      province: '',
      postal_code: ''
    },
    
    // Project Selection
    preferred_project_type: '',
    selected_project_template_id: '',
    custom_project_title: '',
    custom_project_description: '',
    custom_project_goals: '',
    
    // Additional Information
    experience_level: '',
    interests: [],
    expectations: '',
    dietary_restrictions: '',
    medical_conditions: '',
    emergency_contact: {
      name: '',
      phone: '',
      relation: ''
    },
    
    // Notes
    applicant_notes: ''
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen && course) {
      loadSchedules();
    }
  }, [isOpen, course]);

  useEffect(() => {
    if (formData.schedule_id && formData.preferred_project_type) {
      loadProjectTemplates();
    }
  }, [formData.schedule_id, formData.preferred_project_type]);

  const loadSchedules = async () => {
    try {
      const { data, error } = await getAvailableSchedules(course.id);
      if (error) throw error;
      setSchedules(data || []);
    } catch (error) {
      console.error('Error loading schedules:', error);
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  const loadProjectTemplates = async () => {
    try {
      const { data, error } = await getProjectTemplates(
        course.id, 
        formData.preferred_project_type
      );
      if (error) throw error;
      setProjectTemplates(data || []);
    } catch (error) {
      console.error('Error loading project templates:', error);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => {
      if (field.includes('.')) {
        const [parent, child] = field.split('.');
        return {
          ...prev,
          [parent]: {
            ...prev[parent],
            [child]: value
          }
        };
      }
      return {
        ...prev,
        [field]: value
      };
    });

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleInterestToggle = (interest) => {
    setFormData(prev => ({
      ...prev,
      interests: prev.interests.includes(interest)
        ? prev.interests.filter(i => i !== interest)
        : [...prev.interests, interest]
    }));
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1: // Schedule & Project Selection
        if (!formData.schedule_id) {
          newErrors.schedule_id = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
        }
        if (!formData.preferred_project_type) {
          newErrors.preferred_project_type = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô';
        }
        if (formData.preferred_project_type === 'individual' && 
            !formData.selected_project_template_id && 
            !formData.custom_project_title) {
          newErrors.project_selection = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á';
        }
        break;

      case 2: // Personal Information
        if (!formData.applicant_name.trim()) {
          newErrors.applicant_name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
        }
        if (!formData.applicant_email.trim()) {
          newErrors.applicant_email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
        } else if (!/\S+@\S+\.\S+/.test(formData.applicant_email)) {
          newErrors.applicant_email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        }
        if (!formData.applicant_phone.trim()) {
          newErrors.applicant_phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
        }
        if (!formData.applicant_age) {
          newErrors.applicant_age = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏';
        }
        break;

      case 3: // Educational & Contact Information
        if (!formData.school_name.trim()) {
          newErrors.school_name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
        }
        if (!formData.grade_level.trim()) {
          newErrors.grade_level = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô';
        }
        if (!formData.parent_name.trim()) {
          newErrors.parent_name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á';
        }
        if (!formData.parent_phone.trim()) {
          newErrors.parent_phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á';
        }
        break;

      case 4: // Address & Additional Info
        if (!formData.address.address.trim()) {
          newErrors['address.address'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
        }
        if (!formData.address.district.trim()) {
          newErrors['address.district'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠';
        }
        if (!formData.address.province.trim()) {
          newErrors['address.province'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
        }
        if (!formData.address.postal_code.trim()) {
          newErrors['address.postal_code'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå';
        }
        if (!formData.emergency_contact.name.trim()) {
          newErrors['emergency_contact.name'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
        }
        if (!formData.emergency_contact.phone.trim()) {
          newErrors['emergency_contact.phone'] = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô';
        }
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handlePrevious = () => {
    setCurrentStep(prev => prev - 1);
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) {
      return;
    }

    setLoading(true);
    try {
      const { data, error } = await submitOnsiteRegistration(formData);
      
      if (error) throw error;

      toast({
        title: "‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ",
        description: "‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£"
      });

      onSuccess && onSuccess(data);
      onClose();
    } catch (error) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const getSelectedSchedule = () => {
    return schedules.find(s => s.id === formData.schedule_id);
  };

  const stepTitles = [
    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô & ‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô',
    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
    '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà & ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
  ];

  const interests = [
    '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°', '‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå', '‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå', 'IoT', 
    '3D Printing', '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö', '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
  ];

  const experienceLevels = [
    { value: 'none', label: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå' },
    { value: 'beginner', label: '‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô' },
    { value: 'intermediate', label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á' },
    { value: 'advanced', label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á' }
  ];

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.95, opacity: 0 }}
          transition={{ type: "spring", duration: 0.3 }}
          className="glass-effect p-6 rounded-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto"
          onClick={e => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl font-bold text-white">
                ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Onsite: {course?.title}
              </h2>
              <p className="text-slate-400 mt-1">
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {currentStep} ‡∏à‡∏≤‡∏Å {stepTitles.length}: {stepTitles[currentStep - 1]}
              </p>
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={onClose}
              disabled={loading}
            >
              <X className="w-5 h-5" />
            </Button>
          </div>

          {/* Progress Bar */}
          <div className="flex items-center mb-8">
            {stepTitles.map((title, index) => (
              <div key={index} className="flex items-center flex-1">
                <div className={`
                  w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium
                  ${index + 1 <= currentStep 
                    ? 'bg-[#667eea] text-white' 
                    : 'bg-slate-600 text-slate-400'}
                `}>
                  {index + 1 < currentStep ? (
                    <CheckCircle className="w-5 h-5" />
                  ) : (
                    index + 1
                  )}
                </div>
                {index < stepTitles.length - 1 && (
                  <div className={`
                    flex-1 h-1 mx-2 rounded
                    ${index + 1 < currentStep 
                      ? 'bg-[#667eea]' 
                      : 'bg-slate-600'}
                  `} />
                )}
              </div>
            ))}
          </div>

          {/* Step Content */}
          <div className="min-h-[400px]">
            {/* Step 1: Schedule & Project Selection */}
            {currentStep === 1 && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="space-y-6"
              >
                {/* Schedule Selection */}
                <div>
                  <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                    <Calendar className="w-5 h-5 mr-2 text-[#667eea]" />
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                  </h3>
                  <div className="grid gap-4">
                    {schedules.map(schedule => (
                      <label
                        key={schedule.id}
                        className={`
                          block p-4 rounded-lg border-2 cursor-pointer transition-all
                          ${formData.schedule_id === schedule.id 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'
                          }
                          ${schedule.is_full ? 'opacity-50 cursor-not-allowed' : ''}
                        `}
                      >
                        <input
                          type="radio"
                          name="schedule"
                          value={schedule.id}
                          checked={formData.schedule_id === schedule.id}
                          onChange={(e) => handleInputChange('schedule_id', e.target.value)}
                          disabled={schedule.is_full}
                          className="sr-only"
                        />
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium text-white">{schedule.batch_name}</h4>
                            <p className="text-slate-400 text-sm mt-1">{schedule.batch_description}</p>
                            <div className="flex items-center gap-4 mt-2 text-sm text-slate-300">
                              <span>üìÖ {new Date(schedule.start_date).toLocaleDateString('th-TH')} - {new Date(schedule.end_date).toLocaleDateString('th-TH')}</span>
                              <span>üë• {schedule.spaces_left} ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á</span>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-xl font-bold text-white">
                              ‡∏ø{schedule.effective_price?.toLocaleString()}
                            </div>
                            {schedule.is_early_bird && (
                              <span className="text-green-400 text-xs">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©!</span>
                            )}
                            {schedule.is_full && (
                              <span className="text-red-400 text-xs">‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß</span>
                            )}
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                  {errors.schedule_id && (
                    <p className="text-red-400 text-sm mt-2 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {errors.schedule_id}
                    </p>
                  )}
                </div>

                {/* Project Type Selection */}
                {course?.project_type && (
                  <div>
                    <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                      <Target className="w-5 h-5 mr-2 text-[#667eea]" />
                      ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      {(course.project_type === 'both' || course.project_type === 'individual') && (
                        <label className={`
                          block p-4 rounded-lg border-2 cursor-pointer transition-all
                          ${formData.preferred_project_type === 'individual' 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'}
                        `}>
                          <input
                            type="radio"
                            name="project_type"
                            value="individual"
                            checked={formData.preferred_project_type === 'individual'}
                            onChange={(e) => handleInputChange('preferred_project_type', e.target.value)}
                            className="sr-only"
                          />
                          <div className="text-center">
                            <User className="w-8 h-8 mx-auto mb-2 text-[#667eea]" />
                            <h4 className="font-medium text-white">‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</h4>
                            <p className="text-slate-400 text-sm mt-1">
                              ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
                            </p>
                          </div>
                        </label>
                      )}

                      {(course.project_type === 'both' || course.project_type === 'group') && (
                        <label className={`
                          block p-4 rounded-lg border-2 cursor-pointer transition-all
                          ${formData.preferred_project_type === 'group' 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'}
                        `}>
                          <input
                            type="radio"
                            name="project_type"
                            value="group"
                            checked={formData.preferred_project_type === 'group'}
                            onChange={(e) => handleInputChange('preferred_project_type', e.target.value)}
                            className="sr-only"
                          />
                          <div className="text-center">
                            <Users className="w-8 h-8 mx-auto mb-2 text-[#667eea]" />
                            <h4 className="font-medium text-white">‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°</h4>
                            <p className="text-slate-400 text-sm mt-1">
                              ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏° ‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ
                            </p>
                          </div>
                        </label>
                      )}
                    </div>
                    {errors.preferred_project_type && (
                      <p className="text-red-400 text-sm mt-2 flex items-center">
                        <AlertCircle className="w-4 h-4 mr-1" />
                        {errors.preferred_project_type}
                      </p>
                    )}
                  </div>
                )}

                {/* Project Templates (for individual projects) */}
                {formData.preferred_project_type === 'individual' && (
                  <div>
                    <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                      <Lightbulb className="w-5 h-5 mr-2 text-[#667eea]" />
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô
                    </h3>
                    
                    {/* Predefined Templates */}
                    {projectTemplates.length > 0 && (
                      <div className="space-y-3 mb-6">
                        <h4 className="font-medium text-slate-300">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
                        {projectTemplates.map(template => (
                          <label
                            key={template.id}
                            className={`
                              block p-4 rounded-lg border-2 cursor-pointer transition-all
                              ${formData.selected_project_template_id === template.id 
                                ? 'border-[#667eea] bg-[#667eea]/10' 
                                : 'border-slate-600 hover:border-slate-500'}
                            `}
                          >
                            <input
                              type="radio"
                              name="project_template"
                              value={template.id}
                              checked={formData.selected_project_template_id === template.id}
                              onChange={(e) => {
                                handleInputChange('selected_project_template_id', e.target.value);
                                handleInputChange('custom_project_title', '');
                                handleInputChange('custom_project_description', '');
                              }}
                              className="sr-only"
                            />
                            <div>
                              <h5 className="font-medium text-white">{template.project_title}</h5>
                              <p className="text-slate-400 text-sm mt-1">{template.project_description}</p>
                              <div className="flex items-center gap-4 mt-2 text-xs text-slate-300">
                                <span>‚è±Ô∏è {template.estimated_hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span>
                                <span>üìä {template.difficulty_level === 'beginner' ? '‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô' : 
                                            template.difficulty_level === 'intermediate' ? '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á' : '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á'}</span>
                              </div>
                            </div>
                          </label>
                        ))}
                      </div>
                    )}

                    {/* Custom Project Option */}
                    {course?.has_custom_projects && (
                      <div className="border-t border-slate-600 pt-6">
                        <label className={`
                          block p-4 rounded-lg border-2 cursor-pointer transition-all mb-4
                          ${!formData.selected_project_template_id && formData.custom_project_title 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'}
                        `}>
                          <input
                            type="radio"
                            name="project_choice"
                            value="custom"
                            checked={!formData.selected_project_template_id && !!formData.custom_project_title}
                            onChange={() => {
                              handleInputChange('selected_project_template_id', '');
                            }}
                            className="sr-only"
                          />
                          <div className="text-center">
                            <FileText className="w-6 h-6 mx-auto mb-2 text-[#667eea]" />
                            <h4 className="font-medium text-white">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏≠‡∏á</h4>
                            <p className="text-slate-400 text-sm">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
                          </div>
                        </label>

                        {!formData.selected_project_template_id && (
                          <div className="space-y-4">
                            <div>
                              <label className="block text-white font-medium mb-2">
                                ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô *
                              </label>
                              <Input
                                value={formData.custom_project_title}
                                onChange={(e) => handleInputChange('custom_project_title', e.target.value)}
                                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
                                className="bg-slate-700/50 border-slate-600 text-white"
                              />
                            </div>
                            <div>
                              <label className="block text-white font-medium mb-2">
                                ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô
                              </label>
                              <textarea
                                value={formData.custom_project_description}
                                onChange={(e) => handleInputChange('custom_project_description', e.target.value)}
                                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
                                rows={3}
                                className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                              />
                            </div>
                            <div>
                              <label className="block text-white font-medium mb-2">
                                ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô
                              </label>
                              <textarea
                                value={formData.custom_project_goals}
                                onChange={(e) => handleInputChange('custom_project_goals', e.target.value)}
                                placeholder="‡∏Ñ‡∏∏‡∏ì‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ"
                                rows={2}
                                className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                              />
                            </div>
                          </div>
                        )}
                      </div>
                    )}

                    {errors.project_selection && (
                      <p className="text-red-400 text-sm mt-2 flex items-center">
                        <AlertCircle className="w-4 h-4 mr-1" />
                        {errors.project_selection}
                      </p>
                    )}
                  </div>
                )}
              </motion.div>
            )}

            {/* Step 2: Personal Information */}
            {currentStep === 2 && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="space-y-6"
              >
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                  <User className="w-5 h-5 mr-2 text-[#667eea]" />
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                </h3>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *
                    </label>
                    <Input
                      value={formData.applicant_name}
                      onChange={(e) => handleInputChange('applicant_name', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.applicant_name && (
                      <p className="text-red-400 text-sm mt-1">{errors.applicant_name}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏≠‡∏≤‡∏¢‡∏∏ *
                    </label>
                    <Input
                      type="number"
                      value={formData.applicant_age}
                      onChange={(e) => handleInputChange('applicant_age', e.target.value)}
                      placeholder="15"
                      min="10"
                      max="25"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.applicant_age && (
                      <p className="text-red-400 text-sm mt-1">{errors.applicant_age}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏≠‡∏µ‡πÄ‡∏°‡∏• *
                    </label>
                    <Input
                      type="email"
                      value={formData.applicant_email}
                      onChange={(e) => handleInputChange('applicant_email', e.target.value)}
                      placeholder="somchai@email.com"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.applicant_email && (
                      <p className="text-red-400 text-sm mt-1">{errors.applicant_email}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *
                    </label>
                    <Input
                      value={formData.applicant_phone}
                      onChange={(e) => handleInputChange('applicant_phone', e.target.value)}
                      placeholder="081-234-5678"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.applicant_phone && (
                      <p className="text-red-400 text-sm mt-1">{errors.applicant_phone}</p>
                    )}
                  </div>
                </div>

                {/* Experience Level */}
                <div>
                  <label className="block text-white font-medium mb-2">
                    ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {experienceLevels.map(level => (
                      <label
                        key={level.value}
                        className={`
                          block p-3 rounded-lg border-2 cursor-pointer transition-all text-center
                          ${formData.experience_level === level.value 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'}
                        `}
                      >
                        <input
                          type="radio"
                          name="experience_level"
                          value={level.value}
                          checked={formData.experience_level === level.value}
                          onChange={(e) => handleInputChange('experience_level', e.target.value)}
                          className="sr-only"
                        />
                        <span className="text-white text-sm">{level.label}</span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Interests */}
                <div>
                  <label className="block text-white font-medium mb-2">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠)
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {interests.map(interest => (
                      <label
                        key={interest}
                        className={`
                          block p-3 rounded-lg border-2 cursor-pointer transition-all text-center
                          ${formData.interests.includes(interest) 
                            ? 'border-[#667eea] bg-[#667eea]/10' 
                            : 'border-slate-600 hover:border-slate-500'}
                        `}
                      >
                        <input
                          type="checkbox"
                          checked={formData.interests.includes(interest)}
                          onChange={() => handleInterestToggle(interest)}
                          className="sr-only"
                        />
                        <span className="text-white text-sm">{interest}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </motion.div>
            )}

            {/* Step 3: Educational Information */}
            {currentStep === 3 && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="space-y-6"
              >
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                  <GraduationCap className="w-5 h-5 mr-2 text-[#667eea]" />
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
                </h3>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô *
                    </label>
                    <Input
                      value={formData.school_name}
                      onChange={(e) => handleInputChange('school_name', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ABC"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.school_name && (
                      <p className="text-red-400 text-sm mt-1">{errors.school_name}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô *
                    </label>
                    <Input
                      value={formData.grade_level}
                      onChange={(e) => handleInputChange('grade_level', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°.4, ‡∏°.5, ‡∏°.6"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.grade_level && (
                      <p className="text-red-400 text-sm mt-1">{errors.grade_level}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á *
                    </label>
                    <Input
                      value={formData.parent_name}
                      onChange={(e) => handleInputChange('parent_name', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÉ‡∏à‡∏î‡∏µ"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.parent_name && (
                      <p className="text-red-400 text-sm mt-1">{errors.parent_name}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á *
                    </label>
                    <Input
                      value={formData.parent_phone}
                      onChange={(e) => handleInputChange('parent_phone', e.target.value)}
                      placeholder="081-234-5678"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors.parent_phone && (
                      <p className="text-red-400 text-sm mt-1">{errors.parent_phone}</p>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-white font-medium mb-2">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
                  </label>
                  <textarea
                    value={formData.expectations}
                    onChange={(e) => handleInputChange('expectations', e.target.value)}
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ"
                    rows={3}
                    className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                  />
                </div>
              </motion.div>
            )}

            {/* Step 4: Address & Additional Information */}
            {currentStep === 4 && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className="space-y-6"
              >
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                  <MapPin className="w-5 h-5 mr-2 text-[#667eea]" />
                  ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                </h3>

                {/* Address */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h4>
                  
                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *
                    </label>
                    <Input
                      value={formData.address.address}
                      onChange={(e) => handleInputChange('address.address', e.target.value)}
                      placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ñ‡∏ô‡∏ô ‡∏ï‡∏≥‡∏ö‡∏•"
                      className="bg-slate-700/50 border-slate-600 text-white"
                    />
                    {errors['address.address'] && (
                      <p className="text-red-400 text-sm mt-1">{errors['address.address']}</p>
                    )}
                  </div>

                  <div className="grid md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ *
                      </label>
                      <Input
                        value={formData.address.district}
                        onChange={(e) => handleInputChange('address.district', e.target.value)}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                      {errors['address.district'] && (
                        <p className="text-red-400 text-sm mt-1">{errors['address.district']}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *
                      </label>
                      <Input
                        value={formData.address.province}
                        onChange={(e) => handleInputChange('address.province', e.target.value)}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                      {errors['address.province'] && (
                        <p className="text-red-400 text-sm mt-1">{errors['address.province']}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå *
                      </label>
                      <Input
                        value={formData.address.postal_code}
                        onChange={(e) => handleInputChange('address.postal_code', e.target.value)}
                        placeholder="10500"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                      {errors['address.postal_code'] && (
                        <p className="text-red-400 text-sm mt-1">{errors['address.postal_code']}</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Emergency Contact */}
                <div className="space-y-4">
                  <h4 className="font-medium text-slate-300">‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</h4>
                  
                  <div className="grid md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡∏ä‡∏∑‡πà‡∏≠ *
                      </label>
                      <Input
                        value={formData.emergency_contact.name}
                        onChange={(e) => handleInputChange('emergency_contact.name', e.target.value)}
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                      {errors['emergency_contact.name'] && (
                        <p className="text-red-400 text-sm mt-1">{errors['emergency_contact.name']}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ *
                      </label>
                      <Input
                        value={formData.emergency_contact.phone}
                        onChange={(e) => handleInputChange('emergency_contact.phone', e.target.value)}
                        placeholder="081-234-5678"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                      {errors['emergency_contact.phone'] && (
                        <p className="text-red-400 text-sm mt-1">{errors['emergency_contact.phone']}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-white font-medium mb-2">
                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
                      </label>
                      <Input
                        value={formData.emergency_contact.relation}
                        onChange={(e) => handleInputChange('emergency_contact.relation', e.target.value)}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡πà‡∏≠, ‡πÅ‡∏°‡πà, ‡∏ç‡∏≤‡∏ï‡∏¥"
                        className="bg-slate-700/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                </div>

                {/* Additional Information */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    </label>
                    <textarea
                      value={formData.dietary_restrictions}
                      onChange={(e) => handleInputChange('dietary_restrictions', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏û‡πâ‡∏ô‡∏°, ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠, ‡πÑ‡∏°‡πà‡∏°‡∏µ"
                      rows={2}
                      className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                    />
                  </div>

                  <div>
                    <label className="block text-white font-medium mb-2">
                      ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û/‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß
                    </label>
                    <textarea
                      value={formData.medical_conditions}
                      onChange={(e) => handleInputChange('medical_conditions', e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏£‡∏Ñ‡∏´‡∏∑‡∏î, ‡πÑ‡∏°‡πà‡∏°‡∏µ"
                      rows={2}
                      className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-white font-medium mb-2">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </label>
                  <textarea
                    value={formData.applicant_notes}
                    onChange={(e) => handleInputChange('applicant_notes', e.target.value)}
                    placeholder="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á"
                    rows={3}
                    className="w-full px-3 py-2 bg-slate-700/50 border border-slate-600 rounded-md text-white placeholder-slate-400"
                  />
                </div>

                {/* Summary */}
                <div className="bg-slate-800/50 p-4 rounded-lg">
                  <h4 className="font-medium text-white mb-2">‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h4>
                  <div className="text-slate-300 text-sm space-y-1">
                    <p>üìö ‡∏Ñ‡∏≠‡∏£‡πå‡∏™: {course?.title}</p>
                    <p>üìÖ ‡∏£‡∏≠‡∏ö: {getSelectedSchedule()?.batch_name}</p>
                    <p>üéØ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô: {formData.preferred_project_type === 'individual' ? '‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß' : '‡∏Å‡∏•‡∏∏‡πà‡∏°'}</p>
                    <p>üí∞ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ‡∏ø{getSelectedSchedule()?.effective_price?.toLocaleString()}</p>
                  </div>
                </div>
              </motion.div>
            )}
          </div>

          {/* Navigation Buttons */}
          <div className="flex justify-between pt-6 border-t border-slate-600">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 1 || loading}
            >
              ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </Button>

            <div className="flex gap-3">
              {currentStep < stepTitles.length ? (
                <Button
                  onClick={handleNext}
                  disabled={loading}
                  className="bg-[#667eea] hover:bg-[#5a6fcf]"
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </Button>
              ) : (
                <Button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="bg-green-600 hover:bg-green-700"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="w-4 h-4 mr-2" />
                      ‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

export default OnsiteRegistrationForm;